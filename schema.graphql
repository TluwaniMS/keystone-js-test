# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Doctor {
  id: ID!
  name: String
  surname: String
  email: String
  gender: DoctorGenderType
  specialty: DoctorSpecialtyType
  hospital: Hospital
}

enum DoctorGenderType {
  male
  female
}

enum DoctorSpecialtyType {
  pediatrician
  dematologist
  cardiologist
  urologist
  neurologist
  psychiatrist
  radiologist
}

input DoctorWhereUniqueInput {
  id: ID
  email: String
}

input DoctorWhereInput {
  AND: [DoctorWhereInput!]
  OR: [DoctorWhereInput!]
  NOT: [DoctorWhereInput!]
  id: IDFilter
  name: StringFilter
  surname: StringFilter
  email: StringFilter
  gender: DoctorGenderTypeNullableFilter
  specialty: DoctorSpecialtyTypeNullableFilter
  hospital: HospitalWhereInput
}

input DoctorGenderTypeNullableFilter {
  equals: DoctorGenderType
  in: [DoctorGenderType!]
  notIn: [DoctorGenderType!]
  not: DoctorGenderTypeNullableFilter
}

input DoctorSpecialtyTypeNullableFilter {
  equals: DoctorSpecialtyType
  in: [DoctorSpecialtyType!]
  notIn: [DoctorSpecialtyType!]
  not: DoctorSpecialtyTypeNullableFilter
}

input DoctorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  surname: OrderDirection
  email: OrderDirection
  gender: OrderDirection
  specialty: OrderDirection
}

input DoctorUpdateInput {
  name: String
  surname: String
  email: String
  gender: DoctorGenderType
  specialty: DoctorSpecialtyType
  hospital: HospitalRelateToOneForUpdateInput
}

input HospitalRelateToOneForUpdateInput {
  create: HospitalCreateInput
  connect: HospitalWhereUniqueInput
  disconnect: Boolean
}

input DoctorUpdateArgs {
  where: DoctorWhereUniqueInput!
  data: DoctorUpdateInput!
}

input DoctorCreateInput {
  name: String
  surname: String
  email: String
  gender: DoctorGenderType
  specialty: DoctorSpecialtyType
  hospital: HospitalRelateToOneForCreateInput
}

input HospitalRelateToOneForCreateInput {
  create: HospitalCreateInput
  connect: HospitalWhereUniqueInput
}

type Hospital {
  id: ID!
  hospitalName: String
  hospitalKey: String
  municipality: Municipality
  doctors(where: DoctorWhereInput! = {}, orderBy: [DoctorOrderByInput!]! = [], take: Int, skip: Int! = 0): [Doctor!]
  doctorsCount(where: DoctorWhereInput! = {}): Int
}

input HospitalWhereUniqueInput {
  id: ID
}

input HospitalWhereInput {
  AND: [HospitalWhereInput!]
  OR: [HospitalWhereInput!]
  NOT: [HospitalWhereInput!]
  id: IDFilter
  hospitalName: StringFilter
  hospitalKey: StringFilter
  municipality: MunicipalityWhereInput
  doctors: DoctorManyRelationFilter
}

input DoctorManyRelationFilter {
  every: DoctorWhereInput
  some: DoctorWhereInput
  none: DoctorWhereInput
}

input HospitalOrderByInput {
  id: OrderDirection
  hospitalName: OrderDirection
  hospitalKey: OrderDirection
}

input HospitalUpdateInput {
  hospitalName: String
  hospitalKey: String
  municipality: MunicipalityRelateToOneForUpdateInput
  doctors: DoctorRelateToManyForUpdateInput
}

input MunicipalityRelateToOneForUpdateInput {
  create: MunicipalityCreateInput
  connect: MunicipalityWhereUniqueInput
  disconnect: Boolean
}

input DoctorRelateToManyForUpdateInput {
  disconnect: [DoctorWhereUniqueInput!]
  set: [DoctorWhereUniqueInput!]
  create: [DoctorCreateInput!]
  connect: [DoctorWhereUniqueInput!]
}

input HospitalUpdateArgs {
  where: HospitalWhereUniqueInput!
  data: HospitalUpdateInput!
}

input HospitalCreateInput {
  hospitalName: String
  hospitalKey: String
  municipality: MunicipalityRelateToOneForCreateInput
  doctors: DoctorRelateToManyForCreateInput
}

input MunicipalityRelateToOneForCreateInput {
  create: MunicipalityCreateInput
  connect: MunicipalityWhereUniqueInput
}

input DoctorRelateToManyForCreateInput {
  create: [DoctorCreateInput!]
  connect: [DoctorWhereUniqueInput!]
}

type Municipality {
  id: ID!
  municipalityName: String
  municipalKey: String
  hospitals(
    where: HospitalWhereInput! = {}
    orderBy: [HospitalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Hospital!]
  hospitalsCount(where: HospitalWhereInput! = {}): Int
}

input MunicipalityWhereUniqueInput {
  id: ID
  municipalKey: String
}

input MunicipalityWhereInput {
  AND: [MunicipalityWhereInput!]
  OR: [MunicipalityWhereInput!]
  NOT: [MunicipalityWhereInput!]
  id: IDFilter
  municipalityName: StringFilter
  municipalKey: StringFilter
  hospitals: HospitalManyRelationFilter
}

input HospitalManyRelationFilter {
  every: HospitalWhereInput
  some: HospitalWhereInput
  none: HospitalWhereInput
}

input MunicipalityOrderByInput {
  id: OrderDirection
  municipalityName: OrderDirection
  municipalKey: OrderDirection
}

input MunicipalityUpdateInput {
  municipalityName: String
  municipalKey: String
  hospitals: HospitalRelateToManyForUpdateInput
}

input HospitalRelateToManyForUpdateInput {
  disconnect: [HospitalWhereUniqueInput!]
  set: [HospitalWhereUniqueInput!]
  create: [HospitalCreateInput!]
  connect: [HospitalWhereUniqueInput!]
}

input MunicipalityUpdateArgs {
  where: MunicipalityWhereUniqueInput!
  data: MunicipalityUpdateInput!
}

input MunicipalityCreateInput {
  municipalityName: String
  municipalKey: String
  hospitals: HospitalRelateToManyForCreateInput
}

input HospitalRelateToManyForCreateInput {
  create: [HospitalCreateInput!]
  connect: [HospitalWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDoctor(data: DoctorCreateInput!): Doctor
  createDoctors(data: [DoctorCreateInput!]!): [Doctor]
  updateDoctor(where: DoctorWhereUniqueInput!, data: DoctorUpdateInput!): Doctor
  updateDoctors(data: [DoctorUpdateArgs!]!): [Doctor]
  deleteDoctor(where: DoctorWhereUniqueInput!): Doctor
  deleteDoctors(where: [DoctorWhereUniqueInput!]!): [Doctor]
  createHospital(data: HospitalCreateInput!): Hospital
  createHospitals(data: [HospitalCreateInput!]!): [Hospital]
  updateHospital(where: HospitalWhereUniqueInput!, data: HospitalUpdateInput!): Hospital
  updateHospitals(data: [HospitalUpdateArgs!]!): [Hospital]
  deleteHospital(where: HospitalWhereUniqueInput!): Hospital
  deleteHospitals(where: [HospitalWhereUniqueInput!]!): [Hospital]
  createMunicipality(data: MunicipalityCreateInput!): Municipality
  createMunicipalities(data: [MunicipalityCreateInput!]!): [Municipality]
  updateMunicipality(where: MunicipalityWhereUniqueInput!, data: MunicipalityUpdateInput!): Municipality
  updateMunicipalities(data: [MunicipalityUpdateArgs!]!): [Municipality]
  deleteMunicipality(where: MunicipalityWhereUniqueInput!): Municipality
  deleteMunicipalities(where: [MunicipalityWhereUniqueInput!]!): [Municipality]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  doctors(where: DoctorWhereInput! = {}, orderBy: [DoctorOrderByInput!]! = [], take: Int, skip: Int! = 0): [Doctor!]
  doctor(where: DoctorWhereUniqueInput!): Doctor
  doctorsCount(where: DoctorWhereInput! = {}): Int
  hospitals(
    where: HospitalWhereInput! = {}
    orderBy: [HospitalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Hospital!]
  hospital(where: HospitalWhereUniqueInput!): Hospital
  hospitalsCount(where: HospitalWhereInput! = {}): Int
  municipalities(
    where: MunicipalityWhereInput! = {}
    orderBy: [MunicipalityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Municipality!]
  municipality(where: MunicipalityWhereUniqueInput!): Municipality
  municipalitiesCount(where: MunicipalityWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
